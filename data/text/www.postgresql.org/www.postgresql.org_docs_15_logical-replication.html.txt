


PostgreSQL: Documentation: 15: Chapter 31. Logical Replication
































Home
About
Download
Documentation
Community
Developers
Support
Donate
Your account

















9th February 2023: 
  PostgreSQL 15.2, 14.7, 13.10, 12.14, and 11.19 Released!












Documentation → PostgreSQL 15





                    Supported Versions:
                      
                        
                        
                          Current
                          (15)
                        
                      
                         / 
                        
                          14
                        
                      
                         / 
                        
                          13
                        
                      
                         / 
                        
                          12
                        
                      
                         / 
                        
                          11




                    Development Versions:
                    
                      
                      devel




                    Unsupported versions:
                    
                      
                      10



















Chapter 31. Logical Replication


Prev 
Up
Part III. Server Administration
Home
 Next








Chapter 31. Logical Replication




Table of Contents

31.1. Publication
31.2. Subscription


31.2.1. Replication Slot Management
31.2.2. Examples


31.3. Row Filters


31.3.1. Row Filter Rules
31.3.2. Expression Restrictions
31.3.3. UPDATE Transformations
31.3.4. Partitioned Tables
31.3.5. Initial Data Synchronization
31.3.6. Combining Multiple Row Filters
31.3.7. Examples


31.4. Column Lists


31.4.1. Examples


31.5. Conflicts
31.6. Restrictions
31.7. Architecture


31.7.1. Initial Snapshot


31.8. Monitoring
31.9. Security
31.10. Configuration Settings
31.11. Quick Setup


Logical replication is a method of replicating data objects and their changes, based upon their replication identity (usually a primary key). We use the term logical in contrast to physical replication, which uses exact block addresses and byte-by-byte replication. PostgreSQL supports both mechanisms concurrently, see Chapter 27. Logical replication allows fine-grained control over both data replication and security.
Logical replication uses a publish and subscribe model with one or more subscribers subscribing to one or more publications on a publisher node. Subscribers pull data from the publications they subscribe to and may subsequently re-publish data to allow cascading replication or more complex configurations.
Logical replication of a table typically starts with taking a snapshot of the data on the publisher database and copying that to the subscriber. Once that is done, the changes on the publisher are sent to the subscriber as they occur in real-time. The subscriber applies the data in the same order as the publisher so that transactional consistency is guaranteed for publications within a single subscription. This method of data replication is sometimes referred to as transactional replication.
The typical use-cases for logical replication are:



Sending incremental changes in a single database or a subset of a database to subscribers as they occur.


Firing triggers for individual changes as they arrive on the subscriber.


Consolidating multiple databases into a single one (for example for analytical purposes).


Replicating between different major versions of PostgreSQL.


Replicating between PostgreSQL instances on different platforms (for example Linux to Windows)


Giving access to replicated data to different groups of users.


Sharing a subset of the database between multiple databases.



The subscriber database behaves in the same way as any other PostgreSQL instance and can be used as a publisher for other databases by defining its own publications. When the subscriber is treated as read-only by application, there will be no conflicts from a single subscription. On the other hand, if there are other writes done either by an application or by other subscribers to the same set of tables, conflicts can arise.





Prev 
Up
 Next


30.6. WAL Internals 
Home
 31.1. Publication





Submit correction

              If you see anything in the documentation that is not correct, does not match
              your experience with the particular feature or requires further clarification,
              please use
              this form
              to report a documentation issue.
              

 
















Privacy Policy |
        Code of Conduct |
        About PostgreSQL |
        Contact
Copyright © 1996-2023 The PostgreSQL Global Development Group








